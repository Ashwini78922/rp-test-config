package com.scb.channels.research.config;

import com.github.tomakehurst.wiremock.client.WireMock;
import com.github.tomakehurst.wiremock.junit.WireMockRule;
import org.apache.commons.lang.StringUtils;
import org.apache.http.HttpHost;
import org.apache.http.client.HttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.conn.DefaultProxyRoutePlanner;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.mockito.runners.MockitoJUnitRunner;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.util.SocketUtils;
import org.springframework.web.client.RestTemplate;

import java.util.Arrays;
import java.util.Map;
import java.util.stream.Collectors;

import static com.github.tomakehurst.wiremock.client.WireMock.*;
import static com.scb.channels.research.utils.RpApiConstants.HOST_INDEX;
import static com.scb.channels.research.utils.RpApiConstants.PORT_INDEX;
import static java.util.function.Function.identity;

@RunWith(MockitoJUnitRunner.class)
public class RestProxyTemplateTest {

    private int port = SocketUtils.findAvailableTcpPort(9100, 9200);

    @Rule
    public WireMockRule wireMockRule = new WireMockRule(port);

    @Rule
    public ExpectedException expectedException = ExpectedException.none();

    @Before
    public void setUp() {

        stubFor(
                WireMock.post(urlEqualTo("/testProxy"))
                        .willReturn(aResponse()
                                .withStatus(200)
                                .withBody(""))
        );

    }

    @Test
    public void shouldSelectProxyPlannerWithReachableProxy() {
        restProxyTemplate("localhost:" + port).getRestTemplate().postForEntity("http://localhost:" + port + "/testProxy", new HttpEntity<Object>("", new HttpHeaders()), Object.class).getBody();
    }

    @Test
    public void shouldSelectAvailableProxy() {
        restProxyTemplate("1.1.1.1:" + port + ",localhost:" + port).getRestTemplate().postForEntity("http://localhost:" + port + "/testProxy", new HttpEntity<Object>("", new HttpHeaders()), Object.class).getBody();
    }

    @Test
    public void shouldThrowExceptionWhenAllProxiesAreUnReachable() {
        expectedException.expect(RuntimeException.class);
        expectedException.expectMessage("No Proxies available");
        restProxyTemplate("1.1.1.1:" + port).getRestTemplate().postForEntity("http://localhost:" + port + "/testProxy", new HttpEntity<Object>("", new HttpHeaders()), Object.class).getBody();
    }

    private RestProxyTemplate restProxyTemplate(String server) {
        DynamicProxyRoutePlanner dynamicProxyRoutePlanner = Mockito.spy(new DynamicProxyRoutePlanner(proxyRoutePlannerMap(server)));
        RestTemplate restTemplate = new RestTemplate();
        HttpClient httpClient = HttpClients.custom().setRoutePlanner(dynamicProxyRoutePlanner).build();
        restTemplate.setRequestFactory(new HttpComponentsClientHttpRequestFactory(httpClient));
        return Mockito.spy(new RestProxyTemplate(Mockito.spy(restTemplate)));
    }

    private Map<String, DefaultProxyRoutePlanner> proxyRoutePlannerMap(String proxyServer) {
        return Arrays.stream(StringUtils.split(proxyServer, ','))
                .collect(Collectors.toMap(identity(), this::createDefaultProxyRoutPlanner));
    }

    private DefaultProxyRoutePlanner createDefaultProxyRoutPlanner(String proxy) {
        return new DefaultProxyRoutePlanner(
                new HttpHost(StringUtils.split(proxy, ':')[HOST_INDEX], Integer.parseInt(StringUtils.split(proxy, ':')[PORT_INDEX]))
        );
    }
}
