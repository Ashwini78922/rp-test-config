package com.scb.channels.research.resource;


import com.google.common.collect.ImmutableList;
import com.scb.channels.foundation.util.jackson.JacksonMarshaller;
import com.scb.channels.research.model.*;
import com.scb.channels.research.model.user.UserProfile;
import com.scb.channels.research.service.ContentService;
import com.scb.channels.research.service.user.UserProfileService;
import com.scb.channels.research.utils.TestData;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.runners.MockitoJUnitRunner;

import javax.ws.rs.BadRequestException;
import javax.ws.rs.ForbiddenException;
import javax.ws.rs.NotFoundException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static com.scb.channels.research.model.FrequencyCode.DLY;
import static com.scb.channels.research.model.FrequencyCode.IMM;
import static com.scb.channels.research.utils.TestData.buildUserProfile;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class UserResourceImplTest {

    @InjectMocks
    private UserResourceImpl userResourceImpl;

    @Mock
    private UserProfileService userProfileService;

    @Spy
    private JacksonMarshaller marshaller;

    @Mock
    private ContentService contentService;

    @Rule
    public ExpectedException expectedException = ExpectedException.none();

    private String userProfileJson;
    private UserProfile userProfile;
    private User user;

    @Before
    public void setUp() {
        userProfileJson = TestData.getUserProfile();
        userProfile = marshaller.unmarshalStrict(userProfileJson, UserProfile.class);
        user = marshaller.unmarshalLenient(userProfileJson, User.class);
    }


    @Test
    public void should_throw_400_when_user_id_not_present() {
        expectedException.expect(BadRequestException.class);
        userResourceImpl.updateUserProfile(userProfile.getUserId(), null);
    }

    @Test
    public void should_throw_404_when_user_notfound() {
        expectedException.expect(NotFoundException.class);
        expectedException.expectMessage("User not found [" + userProfile.getUserId() + "]");
        userResourceImpl.updateUserProfile(userProfile.getUserId(), userProfileJson);
    }

    @Test
    public void should_allow_update_when_profile_update_is_valid() {
        when(userProfileService.getActiveUserById(userProfile.getUserId())).thenReturn(user);
        UserEntitlement userEntitlement = UserEntitlement.builder().entitlementIncludes(Arrays.asList("FX", "RATES", "CREDIT", "ECONOMICS", "COMMODITIES")).build();
        when(userProfileService.getUserEntitlement(user.getUserId())).thenReturn(userEntitlement);
        userResourceImpl.updateUserProfile(userProfile.getUserId(), userProfileJson);
    }

    @Test
    public void should_return_403_when_userId_in_header_not_match_request_body() {
        when(userProfileService.getActiveUserById(any())).thenReturn(user);
        expectedException.expect(ForbiddenException.class);
        expectedException.expectMessage(userProfile.getUserId() + " unauthorized");
        userResourceImpl.updateUserProfile("123213", userProfileJson);
    }

    @Test
    public void should_not_remove_assetClass_codes_in_subscription() {
        List<AssetClasses> assetClasses = userProfile.getSubscriptions().getAssetClasses();
        List<AssetClasses> updatedAssetClass = new ArrayList<>(assetClasses);
        updatedAssetClass.remove(0);

        UserSubscription updatedSubscription = UserSubscription.builder()
                .analysts(userProfile.getSubscriptions().getAnalysts())
                .languages(userProfile.getSubscriptions().getLanguages())
                .publications(userProfile.getSubscriptions().getPublications())
                .investmentThemes(userProfile.getSubscriptions().getInvestmentThemes())
                .regionsCountries(userProfile.getSubscriptions().getRegionsCountries())
                .assetClasses(updatedAssetClass)
                .build();
        UserEntitlement userEntitlement = UserEntitlement.builder().entitlementIncludes(Arrays.asList("FX", "RATES", "CREDIT", "COMMODITIES")).build();
        when(userProfileService.getUserEntitlement(user.getUserId())).thenReturn(userEntitlement);
        UserProfile userProfileToUpdate = buildUserProfile(userProfile, updatedSubscription);
        when(userProfileService.getActiveUserById(userProfile.getUserId())).thenReturn(user);
        expectedException.expect(BadRequestException.class);
        expectedException.expectMessage(userProfile.getUserId() + " Invalid subscription details");

        userResourceImpl.updateUserProfile(userProfileToUpdate.getUserId(), marshaller.marshalStrict(userProfileToUpdate));
    }

    @Test
    public void should_not_change_assetClass_codes_in_subscription() {
        List<AssetClasses> assetClasses = userProfile.getSubscriptions().getAssetClasses();

        AssetClasses assetClassAtIndex0 = assetClasses.get(0);
        AssetClasses updateAssetClass = AssetClasses.builder()
                .all(assetClassAtIndex0.isAll())
                .code("DANGER!!!")
                .groupReferenceIds(assetClassAtIndex0.getGroupReferenceIds())
                .referenceIds(assetClassAtIndex0.getReferenceIds())
                .build();

        List<AssetClasses> updateAssetClassList = new ArrayList<>(assetClasses);
        updateAssetClassList.remove(0);
        updateAssetClassList.add(updateAssetClass);
        UserEntitlement userEntitlement = UserEntitlement.builder().entitlementIncludes(Arrays.asList("FX", "RATES", "CREDIT", "ECONOMICS", "COMMODITIES")).build();
        when(userProfileService.getUserEntitlement(user.getUserId())).thenReturn(userEntitlement);
        UserSubscription updatedSubscription = UserSubscription.builder()
                .analysts(userProfile.getSubscriptions().getAnalysts())
                .languages(userProfile.getSubscriptions().getLanguages())
                .publications(userProfile.getSubscriptions().getPublications())
                .investmentThemes(userProfile.getSubscriptions().getInvestmentThemes())
                .regionsCountries(userProfile.getSubscriptions().getRegionsCountries())
                .auditInformation(userProfile.getAuditInformation())
                .assetClasses(updateAssetClassList)
                .build();

        UserProfile userProfileToUpdate = buildUserProfile(userProfile, updatedSubscription);
        when(userProfileService.getActiveUserById(userProfile.getUserId())).thenReturn(user);

        expectedException.expect(BadRequestException.class);
        expectedException.expectMessage(userProfile.getUserId() + " Invalid subscription details");

        userResourceImpl.updateUserProfile(userProfileToUpdate.getUserId(), marshaller.marshalStrict(userProfileToUpdate));
    }


    @Test
    public void should_not_allow_alert_settings_update() {
        AlertSettings alertSettings = userProfile.getAlertSettings();

        AlertSettings updatedAlertSettings = AlertSettings.builder()
                .dailyNotificationHour(alertSettings.getDailyNotificationHour())
                .frequencyCode(DLY)
                .dailyNotificationHour("0900")
                .timeZone("Standard time")
                .sendNotificationsToCodes(alertSettings.getSendNotificationsToCodes())
                .build();

        UserProfile userProfileToUpdate = UserProfile.builder()
                .userId(userProfile.getUserId())
                .isActive(userProfile.getIsActive())
                .name(userProfile.getName())
                .firstName(userProfile.getFirstName())
                .lastName(userProfile.getLastName())
                .email(userProfile.getEmail())
                .countryName(userProfile.getCountryName())
                .languageCode(userProfile.getLanguageCode())
                .companyName(userProfile.getCompanyName())
                .userTier(userProfile.getUserTier())
                .alertSettings(updatedAlertSettings)
                .entitlements(userProfile.getEntitlements())
                .languageCode(userProfile.getLanguageCode())
                .subscriptions(userProfile.getSubscriptions())
                .auditInformation(userProfile.getAuditInformation())
                .build();
        when(userProfileService.getActiveUserById(userProfile.getUserId())).thenReturn(user);
        UserEntitlement userEntitlement = UserEntitlement.builder().entitlementIncludes(Arrays.asList("FX", "RATES", "CREDIT", "ECONOMICS", "COMMODITIES")).build();
        when(userProfileService.getActiveUserById(userProfile.getUserId())).thenReturn(user);
        expectedException.expect(BadRequestException.class);
        expectedException.expectMessage(userProfile.getUserId() + " Invalid user profile payload");
        userResourceImpl.updateUserProfile(userProfile.getUserId(), marshaller.marshalStrict(userProfileToUpdate));
    }


    @Test
    public void should_not_allow_invalid_language_selection() {

        UserSubscription updatedSubscription = UserSubscription.builder()
                .analysts(userProfile.getSubscriptions().getAnalysts())
                .languages(Languages.builder().codes(ImmutableList.of("INVALID !#?LANGUAGE CODE")).build())
                .publications(userProfile.getSubscriptions().getPublications())
                .investmentThemes(userProfile.getSubscriptions().getInvestmentThemes())
                .regionsCountries(userProfile.getSubscriptions().getRegionsCountries())
                .assetClasses(userProfile.getSubscriptions().getAssetClasses())
                .build();

        UserProfile userProfileToUpdate = buildUserProfile(userProfile, updatedSubscription);

        when(userProfileService.getActiveUserById(userProfile.getUserId())).thenReturn(user);
        UserEntitlement userEntitlement = UserEntitlement.builder().entitlementIncludes(Arrays.asList("FX")).build();
        when(userProfileService.getUserEntitlement(user.getUserId())).thenReturn(userEntitlement);
        expectedException.expect(BadRequestException.class);
        expectedException.expectMessage(userProfile.getUserId() + " Invalid subscription details");

        userResourceImpl.updateUserProfile(userProfileToUpdate.getUserId(), marshaller.marshalStrict(userProfileToUpdate));
    }

    @Test
    public void should_not_allow_invalid_publication_type_selection() {
        UserSubscription updatedSubscription = UserSubscription.builder()
                .analysts(userProfile.getSubscriptions().getAnalysts())
                .languages(userProfile.getSubscriptions().getLanguages())
                .publications(Publications.builder().tags(ImmutableList.of("INVALID PUBILCATION TAGS?#")).build())
                .investmentThemes(userProfile.getSubscriptions().getInvestmentThemes())
                .regionsCountries(userProfile.getSubscriptions().getRegionsCountries())
                .assetClasses(userProfile.getSubscriptions().getAssetClasses())
                .build();

        UserProfile userProfileToUpdate = buildUserProfile(userProfile, updatedSubscription);

        when(userProfileService.getActiveUserById(userProfile.getUserId())).thenReturn(user);
        UserEntitlement userEntitlement = UserEntitlement.builder().entitlementIncludes(Arrays.asList("FX")).build();
        when(userProfileService.getUserEntitlement(user.getUserId())).thenReturn(userEntitlement);
        expectedException.expect(BadRequestException.class);
        expectedException.expectMessage(userProfile.getUserId() + " Invalid subscription details");

        userResourceImpl.updateUserProfile(userProfileToUpdate.getUserId(), marshaller.marshalStrict(userProfileToUpdate));
    }

    @Test
    public void should_not_allow_invalid_investmenttheme_selection() {
        UserSubscription updatedSubscription = UserSubscription.builder()
                .analysts(userProfile.getSubscriptions().getAnalysts())
                .languages(userProfile.getSubscriptions().getLanguages())
                .publications(userProfile.getSubscriptions().getPublications())
                .investmentThemes(InvestmentThemes.builder().codes(ImmutableList.of("INVALID INVESTEMENT THEME CODE !=")).build())
                .regionsCountries(userProfile.getSubscriptions().getRegionsCountries())
                .assetClasses(userProfile.getSubscriptions().getAssetClasses())
                .build();

        UserProfile userProfileToUpdate = buildUserProfile(userProfile, updatedSubscription);

        when(userProfileService.getActiveUserById(userProfile.getUserId())).thenReturn(user);
        UserEntitlement userEntitlement = UserEntitlement.builder().entitlementIncludes(Arrays.asList("FX", "RATES", "CREDIT", "ECONOMICS", "COMMODITIES")).build();
        when(userProfileService.getUserEntitlement(userProfile.getUserId())).thenReturn(userEntitlement);
        expectedException.expect(BadRequestException.class);
        expectedException.expectMessage(userProfile.getUserId() + " Invalid subscription details");

        userResourceImpl.updateUserProfile(userProfileToUpdate.getUserId(), marshaller.marshalStrict(userProfileToUpdate));
    }

    @Test
    public void should_not_allow_null_daily_notification_hour_when_frequencyCode_is_DLY() {
        when(userProfileService.getActiveUserById(any())).thenReturn(user);
        UserProfile profileToUpdate = UserProfile.builder()
                .userId(userProfile.getUserId())
                .isActive(userProfile.getIsActive())
                .name(userProfile.getName())
                .firstName(userProfile.getFirstName())
                .email(userProfile.getEmail())
                .lastName(userProfile.getLastName())
                .countryName(userProfile.getCountryName())
                .languageCode(userProfile.getLanguageCode())
                .companyName(userProfile.getCompanyName())
                .userTier(userProfile.getUserTier())
                .alertSettings(AlertSettings.builder().frequencyCode(DLY).sendNotificationsToCodes(userProfile.getAlertSettings().getSendNotificationsToCodes())
                        .timeZone(userProfile.getAlertSettings().getTimeZone()).build())
                .entitlements(userProfile.getEntitlements())
                .languageCode(userProfile.getLanguageCode())
                .subscriptions(userProfile.getSubscriptions())
                .auditInformation(userProfile.getAuditInformation())
                .build();

        expectedException.expect(BadRequestException.class);
        userResourceImpl.updateUserProfile(userProfile.getUserId(), marshaller.marshalStrict(profileToUpdate));
    }

    @Test
    public void should_not_allow_null_for_timezone() {

        when(userProfileService.getActiveUserById(any())).thenReturn(user);

        UserProfile profileToUpdate = UserProfile.builder()
                .userId(userProfile.getUserId())
                .isActive(userProfile.getIsActive())
                .name(userProfile.getName())
                .firstName(userProfile.getFirstName())
                .email(userProfile.getEmail())
                .lastName(userProfile.getLastName())
                .countryName(userProfile.getCountryName())
                .languageCode(userProfile.getLanguageCode())
                .companyName(userProfile.getCompanyName())
                .userTier(userProfile.getUserTier())
                .alertSettings(AlertSettings.builder().frequencyCode(DLY).sendNotificationsToCodes(userProfile.getAlertSettings().getSendNotificationsToCodes())
                        .dailyNotificationHour("0900").build())
                .entitlements(userProfile.getEntitlements())
                .languageCode(userProfile.getLanguageCode())
                .subscriptions(userProfile.getSubscriptions())
                .auditInformation(userProfile.getAuditInformation())
                .build();

        expectedException.expect(BadRequestException.class);
        userResourceImpl.updateUserProfile(userProfile.getUserId(), marshaller.marshalStrict(profileToUpdate));
    }


    @Test
    public void should_allow_alert_settings_update_when_user_subscription_is_null() {
        String userProfileWithoutSubscriptionJson = TestData.getUserProfileWithoutSubscription();
        UserProfile userProfileWithoutSubscription = marshaller.unmarshalStrict(userProfileWithoutSubscriptionJson, UserProfile.class);
        User user = marshaller.unmarshalLenient(userProfileWithoutSubscriptionJson, User.class);
        when(userProfileService.getActiveUserById(userProfileWithoutSubscription.getUserId())).thenReturn(user);
        UserEntitlement userEntitlement = UserEntitlement.builder().entitlementIncludes(Arrays.asList("FX")).build();

        UserProfile profileToUpdate = UserProfile.builder()
                .userId(userProfileWithoutSubscription.getUserId())
                .isActive(userProfileWithoutSubscription.getIsActive())
                .name(userProfileWithoutSubscription.getName())
                .firstName(userProfileWithoutSubscription.getFirstName())
                .email(userProfileWithoutSubscription.getEmail())
                .lastName(userProfileWithoutSubscription.getLastName())
                .countryName(userProfileWithoutSubscription.getCountryName())
                .languageCode(userProfileWithoutSubscription.getLanguageCode())
                .companyName(userProfileWithoutSubscription.getCompanyName())
                .userTier(userProfileWithoutSubscription.getUserTier())
                .alertSettings(AlertSettings.builder().frequencyCode(DLY).sendNotificationsToCodes(userProfile.getAlertSettings().getSendNotificationsToCodes())
                        .dailyNotificationHour("0900").timeZone("standard").build())
                .entitlements(userProfileWithoutSubscription.getEntitlements())
                .languageCode(userProfileWithoutSubscription.getLanguageCode())
                .subscriptions(userProfileWithoutSubscription.getSubscriptions())
                .auditInformation(userProfileWithoutSubscription.getAuditInformation())
                .build();

        expectedException.expect(BadRequestException.class);
        expectedException.expectMessage(userProfileWithoutSubscription.getUserId() + " Invalid user profile payload");
        userResourceImpl.updateUserProfile(profileToUpdate.getUserId(), marshaller.marshalStrict(profileToUpdate));
    }

    @Test
    public void should_throw_BadRequestException_when_isAll_is_false_and_language_cade_has_no_value() {
        when(userProfileService.getActiveUserById(any())).thenReturn(user);
        UserEntitlement userEntitlement = UserEntitlement.builder().entitlementIncludes(Arrays.asList("FX", "RATES", "CREDIT", "ECONOMICS", "COMMODITIES")).build();
        when(userProfileService.getUserEntitlement(user.getUserId())).thenReturn(userEntitlement);
        String userProfileWithoutLanguageCode = TestData.getUserProfileWithoutLanguageCode();
        expectedException.expect(BadRequestException.class);
        userResourceImpl.updateUserProfile(userProfile.getUserId(), userProfileWithoutLanguageCode);

    }

    @Test
    public void should_throw_BadRequestException_when_isAll_is_true_and_language_code_has_value() {
        when(userProfileService.getActiveUserById(any())).thenReturn(user);
        UserEntitlement userEntitlement = UserEntitlement.builder().entitlementIncludes(Arrays.asList("FX")).build();
        when(userProfileService.getUserEntitlement(user.getUserId())).thenReturn(userEntitlement);
        String userProfileWithoutLanguage = TestData.getUserProfileWithoutLanguage();
        expectedException.expect(BadRequestException.class);
        userResourceImpl.updateUserProfile(userProfile.getUserId(), userProfileWithoutLanguage);

    }

    @Test
    public void should_throw_BadRequestException_when_language_has_null_value() {
        String userProfileNullLanguage = TestData.getUserProfileNullLanguage();
        expectedException.expect(BadRequestException.class);
        userResourceImpl.updateUserProfile(userProfile.getUserId(), userProfileNullLanguage);

    }

    @Test
    public void should_not_allow_userupdate_when_actualuserentitlement_notcontains_toupdate_assetclasscode(){
        when(userProfileService.getActiveUserById(any())).thenReturn(user);
        UserEntitlement userEntitlement = UserEntitlement.builder().entitlementIncludes(Arrays.asList("FX")).build();
        when(userProfileService.getUserEntitlement(any())).thenReturn(userEntitlement);
        String actualUserEntitlement = TestData.getActualUserEntitlement();
        expectedException.expect(BadRequestException.class);
        userResourceImpl.updateUserProfile(userProfile.getUserId(),actualUserEntitlement);

    }

    @Test
    public void should_not_allow_userupdate_alertsetting_is_null(){
        when(userProfileService.getActiveUserById(any())).thenReturn(user);
        String userProfileNullAlertSetting = TestData.getUserProfileNullAlertSetting();
        expectedException.expect(BadRequestException.class);
        userResourceImpl.updateUserProfile(userProfile.getUserId(),userProfileNullAlertSetting);
    }

    @Test
    public void should_throw_400_when_language_code_not_present() {
        expectedException.expect(BadRequestException.class);
        userResourceImpl.updateUserProfile(userProfile.getLanguageCode(), null);
    }

    @Test
    public void should_allow_alert_settings_update_when_alert_daily() {
        String userProfileDailyAlertJson = TestData.getUserProfileDailyAlert();
        UserProfile userProfileDailyAlert = marshaller.unmarshalStrict(userProfileDailyAlertJson, UserProfile.class);

        AlertSettings alertSettings = userProfileDailyAlert.getAlertSettings();

        AlertSettings updatedAlertSettings = AlertSettings.builder()
                .dailyNotificationHour(alertSettings.getDailyNotificationHour())
                .frequencyCode(DLY)
                .dailyNotificationHour("0900")
                .timeZone("Standard time")
                .sendNotificationsToCodes(alertSettings.getSendNotificationsToCodes())
                .build();

        UserProfile userProfileToUpdate = UserProfile.builder()
                .userId(userProfile.getUserId())
                .isActive(userProfile.getIsActive())
                .name(userProfile.getName())
                .firstName(userProfile.getFirstName())
                .lastName(userProfile.getLastName())
                .email(userProfile.getEmail())
                .countryName(userProfile.getCountryName())
                .languageCode(userProfile.getLanguageCode())
                .companyName(userProfile.getCompanyName())
                .userTier(userProfile.getUserTier())
                .alertSettings(updatedAlertSettings)
                .entitlements(userProfile.getEntitlements())
                .languageCode(userProfile.getLanguageCode())
                .subscriptions(userProfile.getSubscriptions())
                .auditInformation(userProfile.getAuditInformation())
                .build();
        when(userProfileService.getActiveUserById(userProfile.getUserId())).thenReturn(user);
        UserEntitlement userEntitlement = UserEntitlement.builder().entitlementIncludes(Arrays.asList("FX", "RATES", "CREDIT", "ECONOMICS", "COMMODITIES")).build();
        when(userProfileService.getUserEntitlement(user.getUserId())).thenReturn(userEntitlement);
        when(userProfileService.getActiveUserById(userProfile.getUserId())).thenReturn(user);
        userResourceImpl.updateUserProfile(userProfile.getUserId(), marshaller.marshalStrict(userProfileToUpdate));
    }

    @Test
    public void should_allow_alert_settings_update_when_alert_immediate() {
        AlertSettings alertSettings = userProfile.getAlertSettings();

        AlertSettings updatedAlertSettings = AlertSettings.builder()
                .dailyNotificationHour(alertSettings.getDailyNotificationHour())
                .frequencyCode(IMM)
                .dailyNotificationHour("0900")
                .timeZone("Standard time")
                .sendNotificationsToCodes(alertSettings.getSendNotificationsToCodes())
                .build();

        UserProfile userProfileToUpdate = UserProfile.builder()
                .userId(userProfile.getUserId())
                .isActive(userProfile.getIsActive())
                .name(userProfile.getName())
                .firstName(userProfile.getFirstName())
                .lastName(userProfile.getLastName())
                .email(userProfile.getEmail())
                .countryName(userProfile.getCountryName())
                .languageCode(userProfile.getLanguageCode())
                .companyName(userProfile.getCompanyName())
                .userTier(userProfile.getUserTier())
                .alertSettings(updatedAlertSettings)
                .entitlements(userProfile.getEntitlements())
                .languageCode(userProfile.getLanguageCode())
                .subscriptions(userProfile.getSubscriptions())
                .auditInformation(userProfile.getAuditInformation())
                .build();
        when(userProfileService.getActiveUserById(userProfile.getUserId())).thenReturn(user);
        UserEntitlement userEntitlement = UserEntitlement.builder().entitlementIncludes(Arrays.asList("FX", "RATES", "CREDIT", "ECONOMICS", "COMMODITIES")).build();
        when(userProfileService.getUserEntitlement(user.getUserId())).thenReturn(userEntitlement);
        when(userProfileService.getActiveUserById(userProfile.getUserId())).thenReturn(user);
        userResourceImpl.updateUserProfile(userProfile.getUserId(), marshaller.marshalStrict(userProfileToUpdate));
    }
}
